These are all of the methods a card can invoke using the game's Kernel
Generally, this is how cards interact with the game


def look_at(self, player, play_area) -> Optional[List[Card]]:
    """
    Callback for revealing an area to a player
    -> player is the player that the area will be revealed to
    -> play_area is the area to be revealed

    * polls the cards to see if the operation is allowed
    * if no cards return True or False, calls __default_look_handler

    <- if allowed, returns the contents of the area
    """


def move_card(self, player, card, from_area, to_area) -> bool:
    """
    Callback for moving a card between play areas
    -> player is the player responsible for the action
    -> card is the card being moved
    -> from_area is the area the card is being removed from
    -> to_area is the area the card is being added to

    * polls the cards to see if the operation is allowed
    * if no cards return True or False, calls __default_move_handler
    * if allowed, moves the card and

    <- returns whether the action was performed
    """
    

def end_turn(self, player) -> bool:
    """
    Advances to the next turn
    -> player - the player whose turn is ending

    * polls the cards to see if the operation is allowed
    * if no cards return True or False, calls __default_end_turn_handler
    * if allowed, calls the game's advance_turn function

    <- returns whether the action was performed
    """

def score_area(self, score_area):
    """
    Gets the score of an area
    -> score_area - the area to score

    * polls the cards to see if a custom scoring operation is needed
    * if no cards return a score, calls __default_score_area_handler

    <- returns the score
    """

# This method is preferred over refering to  a card's .val field
# Use this for non-permanent changes to other card's scores
def score_card(self, score_card):
    """
    Gets the score of a card
    -> score_card - the area to score

    * polls the cards to see if a custom score value should be returned
    * if no cards return a custom score, calls __default_score_card_handler

    <- returns the score
    """

def get_mutable_card(self, player, requested_card):
    """
    Returns a mutable copy of a card
    -> player, the player behind the card request
    -> requested_card, the card the requestor wants a mutable version of
    
    * polls the cards to see if the requestor is allowed to edit the requested card
    * if no cards return a True or False, calls __default_score_card_handler

    <- if allowed, returns a mutable reference the card, otherwise None
    """

def end_game(self):
    """
    Calls card's end_game hooks right before the game ends.
    """

def send_message(self, players, message):
    """
    Send `message` to each player in `players`
    """
    pass

def get_player_input(self, player, choices):
    """
    Prompt a player with the choices,
    Pause execution until the player makes a choice,
    And return which choice they chose
    """
    pass

